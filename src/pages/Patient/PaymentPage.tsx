import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import {
  CheckCircleIcon,
  XCircleIcon,
  ClockIcon,
} from "@heroicons/react/24/solid";
import { Button, Spinner } from "@heroui/react";

import { paymentApi } from "@/api";

interface PaymentStatus {
  payment: {
    _id: string;
    appointmentId: string;
    amount: number;
    status: "Pending" | "Completed" | "Failed" | "Cancelled";
    QRurl?: string;
    expiresAt?: string;
  };
  appointment?: {
    _id: string;
    status: string;
  };
  confirmed?: boolean;
}

const PaymentPage = () => {
  const { paymentId } = useParams<{ paymentId: string }>();
  const navigate = useNavigate();

  const [paymentData, setPaymentData] = useState<PaymentStatus | null>(null);
  const [loading, setLoading] = useState(true);
  const [checkingStatus, setCheckingStatus] = useState(false);
  const [pollingCount, setPollingCount] = useState(0);
  const [error, setError] = useState<string | null>(null);

  if (!paymentId) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-red-50 to-red-100">
        <div className="bg-white rounded-2xl shadow-2xl p-8 max-w-md w-full">
          <XCircleIcon className="w-20 h-20 text-red-500 mx-auto mb-4" />
          <h1 className="text-2xl font-bold text-gray-800 text-center mb-2">
            L·ªói
          </h1>
          <p className="text-gray-600 text-center mb-6">
            Kh√¥ng t√¨m th·∫•y ID thanh to√°n
          </p>
          <Button
            className="w-full bg-blue-500 text-white hover:bg-blue-600"
            onPress={() => navigate("/")}
          >
            V·ªÅ trang ch·ªß
          </Button>
        </div>
      </div>
    );
  }

  // Fetch payment info khi mount
  useEffect(() => {
    const fetchPaymentInfo = async () => {
      try {
        setLoading(true);
        const res = await paymentApi.checkPaymentStatus(paymentId);

        setPaymentData(res.data);
        setError(null);

        console.log("üí≥ Payment Status:", res.data);

        // N·∫øu thanh to√°n th√†nh c√¥ng, kh√¥ng polling n·ªØa
        if (res.data?.confirmed) {
          console.log("‚úÖ Thanh to√°n ƒë√£ x√°c nh·∫≠n!");
          // Auto redirect sau 3 gi√¢y
          setTimeout(() => {
            navigate("/patient/appointments");
          }, 3000);
        }
      } catch (err: any) {
        console.error("L·ªói l·∫•y th√¥ng tin thanh to√°n:", err);
        setError(err.message || "L·ªói l·∫•y th√¥ng tin thanh to√°n");
      } finally {
        setLoading(false);
      }
    };

    fetchPaymentInfo();
  }, [paymentId]);

  // Polling ƒë·ªÉ check status thanh to√°n m·ªói 5 gi√¢y
  useEffect(() => {
    // Ch·ªâ polling n·∫øu thanh to√°n ch∆∞a th√†nh c√¥ng
    if (!paymentData?.confirmed && paymentData?.payment?.status === "Pending") {
      const interval = setInterval(async () => {
        try {
          setCheckingStatus(true);
          const res = await paymentApi.checkPaymentStatus(paymentId);

          setPaymentData(res.data);
          setPollingCount((prev) => prev + 1);

          console.log(
            "üîÑ Check #" + (pollingCount + 1) + " - Status:",
            res.data?.payment?.status,
          );

          // N·∫øu thanh to√°n th√†nh c√¥ng, stop polling v√† redirect
          if (res.data?.confirmed) {
            console.log("‚úÖ Thanh to√°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!");
            clearInterval(interval);
            setTimeout(() => {
              navigate("/patient/appointments");
            }, 2000);
          }
        } catch (err) {
          console.error("L·ªói khi check status:", err);
        } finally {
          setCheckingStatus(false);
        }
      }, 5000); // Check m·ªói 5 gi√¢y

      return () => clearInterval(interval);
    }
  }, [paymentId, paymentData?.confirmed, paymentData?.payment?.status]);

  const formatCurrency = (amount: number) => {
    return amount.toLocaleString("vi-VN");
  };

  // Loading state
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
        <div className="bg-white rounded-2xl shadow-2xl p-8 text-center">
          <Spinner color="primary" label="ƒêang t·∫£i th√¥ng tin thanh to√°n..." />
        </div>
      </div>
    );
  }

  // Error state
  if (error || !paymentData?.payment) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-red-50 to-red-100">
        <div className="bg-white rounded-2xl shadow-2xl p-8 max-w-md w-full">
          <XCircleIcon className="w-20 h-20 text-red-500 mx-auto mb-4" />
          <h1 className="text-2xl font-bold text-gray-800 text-center mb-2">
            L·ªói
          </h1>
          <p className="text-gray-600 text-center mb-6">{error}</p>
          <Button
            className="w-full bg-blue-500 text-white hover:bg-blue-600"
            onPress={() => navigate("/")}
          >
            V·ªÅ trang ch·ªß
          </Button>
        </div>
      </div>
    );
  }

  // Success state - thanh to√°n ƒë√£ ho√†n t·∫•t
  if (paymentData.confirmed && paymentData.payment.status === "Completed") {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 p-4">
        <div className="bg-white rounded-2xl shadow-2xl p-8 max-w-md w-full text-center">
          <CheckCircleIcon className="w-20 h-20 text-green-500 mx-auto mb-4" />
          <h1 className="text-3xl font-bold text-gray-800 mb-2">
            Thanh to√°n th√†nh c√¥ng!
          </h1>
          <p className="text-gray-600 mb-2">
            L·ªãch h·∫πn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n
          </p>
          <p className="text-sm text-gray-500 mb-6">
            S·ªë ti·ªÅn: {formatCurrency(paymentData.payment.amount)} VND
          </p>
          <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
            <p className="text-sm text-green-800">
              ‚úÖ ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c l∆∞u v√† s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ngay. H√£y ch·ªù
              li√™n h·ªá t·ª´ ph√≤ng kh√°m.
            </p>
          </div>
          <Button
            className="w-full bg-green-500 text-white hover:bg-green-600"
            onPress={() => navigate("/patient/appointments")}
          >
            Xem l·ªãch h·∫πn c·ªßa t√¥i
          </Button>
        </div>
      </div>
    );
  }

  // Pending state - ch·ªù thanh to√°n
  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="bg-white rounded-2xl shadow-2xl p-8 max-w-md w-full">
        {/* Header */}
        <div className="text-center mb-6">
          <ClockIcon className="w-16 h-16 text-blue-500 mx-auto mb-3" />
          <h1 className="text-2xl font-bold text-gray-800 mb-2">
            Thanh to√°n qua Sepay
          </h1>
          <p className="text-gray-600">
            Qu√©t m√£ QR b√™n d∆∞·ªõi ƒë·ªÉ ho√†n t·∫•t thanh to√°n
          </p>
        </div>

        {/* Amount */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <p className="text-sm text-gray-600 text-center mb-1">
            S·ªë ti·ªÅn c·∫ßn thanh to√°n
          </p>
          <p className="text-3xl font-bold text-blue-600 text-center">
            {formatCurrency(paymentData.payment.amount)} VND
          </p>
        </div>

        {/* QR Code */}
        {paymentData.payment.QRurl ? (
          <div className="bg-gray-50 rounded-lg p-4 mb-6">
            <img
              alt="Payment QR Code"
              className="w-full rounded-lg"
              src={paymentData.payment.QRurl}
            />
            <p className="text-xs text-gray-500 text-center mt-2">
              M√£ QR t·ª´ Sepay Banking
            </p>
          </div>
        ) : (
          <div className="bg-gray-50 rounded-lg p-8 mb-6 text-center">
            <p className="text-gray-500">ƒêang t·∫£i m√£ QR...</p>
          </div>
        )}

        {/* Instructions */}
        <div className="bg-amber-50 border border-amber-200 rounded-lg p-4 mb-6">
          <h3 className="font-semibold text-amber-800 mb-2">
            üì± C√°ch thanh to√°n:
          </h3>
          <ol className="text-sm text-amber-700 space-y-1">
            <li>1. M·ªü ·ª©ng d·ª•ng ng√¢n h√†ng c·ªßa b·∫°n</li>
            <li>2. Qu√©t m√£ QR tr√™n m√†n h√¨nh n√†y</li>
            <li>3. Ki·ªÉm tra s·ªë ti·ªÅn v√† x√°c nh·∫≠n</li>
            <li>4. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t khi nh·∫≠n ƒë∆∞·ª£c thanh to√°n</li>
          </ol>
        </div>

        {/* Status Check */}
        <div className="flex items-center justify-center gap-2 mb-6">
          {checkingStatus ? (
            <>
              <Spinner color="primary" size="sm" />
              <span className="text-sm text-gray-600">
                ƒêang ki·ªÉm tra thanh to√°n...
              </span>
            </>
          ) : (
            <span className="text-xs text-gray-500">
              Ki·ªÉm tra m·ªói 5 gi√¢y (L·∫ßn {pollingCount})
            </span>
          )}
        </div>

        {/* Expiry Info */}
        {paymentData.payment.expiresAt && (
          <div className="bg-orange-50 border border-orange-200 rounded-lg p-3 mb-6 text-center">
            <p className="text-xs text-orange-800">
              ‚è∞ H·∫°n thanh to√°n:{" "}
              {new Date(paymentData.payment.expiresAt).toLocaleString("vi-VN")}
            </p>
          </div>
        )}

        {/* Manual Check Button */}
        <Button
          className="w-full bg-blue-500 text-white hover:bg-blue-600"
          isDisabled={checkingStatus}
          onPress={async () => {
            try {
              setCheckingStatus(true);
              const res = await paymentApi.checkPaymentStatus(paymentId);

              setPaymentData(res.data);
              if (res.data?.confirmed) {
                navigate("/patient/appointments");
              }
            } finally {
              setCheckingStatus(false);
            }
          }}
        >
          {checkingStatus ? "ƒêang ki·ªÉm tra..." : "Ki·ªÉm tra ngay"}
        </Button>

        {/* Back Button */}
        <Button
          className="w-full mt-3"
          variant="bordered"
          onPress={() => navigate("/")}
        >
          Quay l·∫°i
        </Button>
      </div>
    </div>
  );
};

export default PaymentPage;
