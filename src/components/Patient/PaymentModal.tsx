import React, { useState, useEffect, useRef } from "react";
import {
  QrCodeIcon,
  ViewfinderCircleIcon,
  CheckCircleIcon,
  ArrowPathIcon,
  ExclamationTriangleIcon,
  ClockIcon,
} from "@heroicons/react/24/outline"; // S·ª≠ d·ª•ng outline icons cho thanh l·ªãch

import { paymentApi } from "@/api"; // Import API v·ª´a t·∫°o

type PaymentStatus = "pending" | "checking" | "success" | "error" | "expired";
interface PaymentModalProps {
  isOpen: boolean;
  onClose: () => void;
  // Prop m·ªõi ƒë·ªÉ nh·∫≠n paymentId t·ª´ context
  paymentId: string | null;
}

// H·∫±ng s·ªë th·ªùi gian ƒë·∫øm ng∆∞·ª£c (3 ph√∫t * 60 gi√¢y) - CHO DEMO
const COUNTDOWN_SECONDS = 3 * 60;

/**
 * Helper function ƒë·ªÉ ƒë·ªãnh d·∫°ng gi√¢y th√†nh MM:SS
 */
const formatTime = (timeInSeconds: number) => {
  const minutes = Math.floor(timeInSeconds / 60);
  const seconds = timeInSeconds % 60;

  return {
    minutes: String(minutes).padStart(2, "0"),
    seconds: String(seconds).padStart(2, "0"),
  };
};

const PaymentModal: React.FC<PaymentModalProps> = ({
  isOpen,
  onClose,
  paymentId,
}) => {
  const [timeLeft, setTimeLeft] = useState(COUNTDOWN_SECONDS);
  const [status, setStatus] = useState<PaymentStatus>("pending");
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const { minutes, seconds } = formatTime(timeLeft);

  // ‚≠ê Ref ƒë·ªÉ track xem payment ƒë√£ ho√†n th√†nh ch∆∞a (success/expired/error)
  const isCompletedRef = useRef(false);

  /**
   * Logic ƒë·∫øm ng∆∞·ª£c
   * 1. Ch·ªâ ch·∫°y khi modal ƒë∆∞·ª£c m·ªü (isOpen)
   * 2. Reset l·∫°i 10 ph√∫t m·ªói khi modal m·ªü
   * 3. D·ª´ng l·∫°i v√† g·ªçi onClose() khi h·∫øt gi·ªù
   * 4. D·ªçn d·∫πp (clear interval) khi component unmount ho·∫∑c modal ƒë√≥ng
   */
  useEffect(() => {
    // Kh√¥ng l√†m g√¨ n·∫øu modal ƒëang ƒë√≥ng
    if (!isOpen || !paymentId) {
      setStatus("pending");

      return;
    }

    // Reset l·∫°i th·ªùi gian m·ªói khi m·ªü modal
    setTimeLeft(COUNTDOWN_SECONDS);
    setStatus("pending"); // Reset tr·∫°ng th√°i
    setErrorMessage(null); // Reset l·ªói

    // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c
    const intervalId = setInterval(() => {
      setTimeLeft((prevTime) => {
        if (prevTime <= 1) {
          clearInterval(intervalId); // D·ª´ng ƒë·∫øm ng∆∞·ª£c
          setStatus("expired"); // ‚ö†Ô∏è Hi·ªÉn th·ªã UI h·∫øt h·∫°n thay v√¨ ƒë√≥ng ngay

          return 0;
        }

        return prevTime - 1; // Gi·∫£m 1 gi√¢y
      });
    }, 1000); // C·∫≠p nh·∫≠t m·ªói gi√¢y

    // H√†m d·ªçn d·∫πp:
    // Ch·∫°y khi component unmount ho·∫∑c khi `isOpen` thay ƒë·ªïi (t·ª´ true -> false)
    return () => {
      clearInterval(intervalId);
    };
  }, [isOpen, paymentId, onClose]); // Ph·ª• thu·ªôc v√†o `isOpen` v√† `onClose`

  /**
   * Logic ki·ªÉm tra thanh to√°n
   * 1. Ch·ªâ ch·∫°y khi modal m·ªü, c√≥ paymentId
   * 2. G·ªçi API checkPaymentStatus m·ªói 5 gi√¢y
   * 3. N·∫øu th√†nh c√¥ng, hi·ªÉn th·ªã m√†n h√¨nh success v√† d·ª´ng ki·ªÉm tra
   * 4. N·∫øu l·ªói ho·∫∑c h·∫øt h·∫°n, hi·ªÉn th·ªã l·ªói/expired v√† d·ª´ng ki·ªÉm tra
   */
  useEffect(() => {
    if (!isOpen || !paymentId) {
      return;
    }

    // Reset completed ref khi modal m·ªü
    isCompletedRef.current = false;

    let intervalId: NodeJS.Timeout | null = null;

    const checkStatus = async () => {
      // ‚≠ê N·∫øu ƒë√£ completed, kh√¥ng check n·ªØa
      if (isCompletedRef.current) {
        console.log("‚è≠Ô∏è Already completed, skipping check");

        return;
      }

      try {
        setStatus("checking");
        console.log(`üîç Checking payment status for ID: ${paymentId}...`);
        const response = await paymentApi.checkPaymentStatus(paymentId);

        // üêõ DEBUG: Log to√†n b·ªô response ƒë·ªÉ ki·ªÉm tra
        console.log("üîç FULL RESPONSE:", JSON.stringify(response, null, 2));
        console.log("üîç response.data:", response.data);
        console.log("üîç response.data?.expired:", response.data?.expired);

        // ‚ö†Ô∏è Check n·∫øu payment ƒë√£ expired ho·∫∑c cancelled t·ª´ backend
        if (response.success && response.data?.expired) {
          console.log("‚è∞ Payment expired/cancelled from backend!");
          console.log("üìã Message from backend:", response.message);

          // ‚≠ê QUAN TR·ªåNG: ƒê√°nh d·∫•u completed v√† d·ª´ng interval
          isCompletedRef.current = true;
          if (intervalId) {
            clearInterval(intervalId);
            console.log("üõë Interval cleared!");
          }

          setStatus("expired");
          setErrorMessage(
            response.message ||
              "Thanh to√°n ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒë·∫∑t l·∫°i l·ªãch h·∫πn.",
          );

          // T·ª± ƒë·ªông redirect v·ªÅ trang appointments sau 5 gi√¢y
          setTimeout(() => {
            window.location.href = "/patient/appointments";
          }, 5000);

          return;
        }

        // ‚úÖ Check n·∫øu payment ƒë√£ completed
        if (response.success && response.data?.confirmed) {
          console.log("‚úÖ Payment confirmed!", response.data);

          // ‚≠ê ƒê√°nh d·∫•u completed v√† d·ª´ng interval
          isCompletedRef.current = true;
          if (intervalId) {
            clearInterval(intervalId);
          }

          setStatus("success");
          // T·ª± ƒë·ªông ƒë√≥ng modal sau 5 gi√¢y
          setTimeout(() => {
            onClose();
          }, 5000);
        } else {
          // ‚è≥ V·∫´n ƒëang ch·ªù, kh√¥ng l√†m g√¨ c·∫£, l·∫ßn check ti·∫øp theo s·∫Ω ch·∫°y
          console.log("...Payment not yet confirmed.");
          setStatus("pending");
        }
      } catch (error: any) {
        console.error("‚ùå Error checking payment status:", error);

        // ‚≠ê ƒê√°nh d·∫•u completed v√† d·ª´ng interval khi c√≥ l·ªói
        isCompletedRef.current = true;
        if (intervalId) {
          clearInterval(intervalId);
        }

        setErrorMessage(
          error.message || "L·ªói k·∫øt n·ªëi khi ki·ªÉm tra thanh to√°n.",
        );
        setStatus("error");
      }
    };

    // G·ªçi l·∫ßn ƒë·∫ßu ti√™n ngay l·∫≠p t·ª©c
    checkStatus();
    // Sau ƒë√≥ g·ªçi m·ªói 5 gi√¢y
    intervalId = setInterval(checkStatus, 5000);

    // D·ªçn d·∫πp khi modal ƒë√≥ng ho·∫∑c paymentId thay ƒë·ªïi
    return () => {
      if (intervalId) {
        clearInterval(intervalId);
        console.log("üßπ Cleanup: Interval cleared");
      }
    };
  }, [isOpen, paymentId, onClose]); // ‚≠ê B·ªé status ra kh·ªèi dependency
  // Kh√¥ng render g√¨ n·∫øu modal kh√¥ng m·ªü
  if (!isOpen) {
    return null;
  }

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center">
      {/* Backdrop */}
      <div className="absolute inset-0 bg-black/60 backdrop-blur-sm" />

      {/* Modal Content */}
      <div className="relative bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 transition-all duration-300">
        {/* Ti√™u ƒë·ªÅ ch√≠nh */}
        <div className="text-center p-6 border-b border-gray-200">
          <h2 className="text-2xl font-bold text-gray-800">
            Thanh to√°n cho bu·ªïi t∆∞ v·∫•n c·ªßa b·∫°n
          </h2>
          <p className="text-sm text-gray-500 mt-2">
            Vui l√≤ng ho√†n th√†nh thanh to√°n trong th·ªùi gian quy ƒë·ªãnh ƒë·ªÉ x√°c nh·∫≠n
            l·ªãch h·∫πn t∆∞ v·∫•n c·ªßa b·∫°n.
          </p>
        </div>

        {/* Th√¢n Modal (Chia 2 c·ªôt) */}
        <div
          className={`grid grid-cols-1 ${status === "success" ? "" : "md:grid-cols-2"} gap-8 p-8`}
        >
          {/* --- TR·∫†NG TH√ÅI TH√ÄNH C√îNG --- */}
          {status === "success" && (
            <div className="flex flex-col items-center justify-center text-center p-8">
              <CheckCircleIcon className="w-24 h-24 text-green-500 mb-6" />
              <h2 className="text-3xl font-bold text-gray-800">
                Thanh to√°n th√†nh c√¥ng!
              </h2>
              <p className="text-gray-600 mt-3">
                L·ªãch h·∫πn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n
                s·ªõm nh·∫•t.
              </p>
              <p className="text-sm text-gray-500 mt-2">
                C·ª≠a s·ªï n√†y s·∫Ω t·ª± ƒë·ªông ƒë√≥ng sau 5 gi√¢y.
              </p>
              <button
                className="w-full max-w-xs px-6 py-3 mt-8 bg-green-600 text-white rounded-lg font-semibold hover:bg-green-700 transition"
                onClick={onClose}
              >
                ƒê√≥ng ngay
              </button>
            </div>
          )}

          {/* --- TR·∫†NG TH√ÅI L·ªñI --- */}
          {status === "error" && (
            <div className="flex flex-col items-center justify-center text-center p-8 md:col-span-2">
              <ExclamationTriangleIcon className="w-24 h-24 text-red-500 mb-6" />
              <h2 className="text-3xl font-bold text-gray-800">
                ƒê√£ c√≥ l·ªói x·∫£y ra
              </h2>
              <p className="text-red-600 bg-red-50 rounded-md p-3 mt-3">
                {errorMessage || "Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i thanh to√°n."}
              </p>
              <div className="flex gap-4 mt-8">
                <button
                  className="px-6 py-3 bg-gray-200 text-gray-800 rounded-lg font-semibold hover:bg-gray-300 transition"
                  onClick={onClose}
                >
                  ƒê√≥ng
                </button>
                <button
                  className="px-6 py-3 bg-[#39BDCC] text-white rounded-lg font-semibold hover:bg-[#2ca6b5] transition"
                  onClick={() => (window.location.href = "tel:0123456789")}
                >
                  Li√™n h·ªá h·ªó tr·ª£
                </button>
              </div>
            </div>
          )}

          {/* --- TR·∫†NG TH√ÅI H·∫æT H·∫†N / B·ªä H·ª¶Y --- */}
          {status === "expired" && (
            <div className="flex flex-col items-center justify-center text-center p-8 md:col-span-2">
              <ClockIcon className="w-24 h-24 text-orange-500 mb-6" />
              <h2 className="text-3xl font-bold text-gray-800">
                Thanh to√°n kh√¥ng th√†nh c√¥ng
              </h2>
              <p className="text-gray-600 mt-3">
                {errorMessage ||
                  "L·ªãch h·∫πn c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy do qu√° th·ªùi gian thanh to√°n."}
              </p>
              <div className="bg-orange-50 border border-orange-200 rounded-lg p-4 mt-6 max-w-md">
                <p className="text-sm text-orange-800">
                  üí° <strong>L∆∞u √Ω:</strong> B·∫°n c·∫ßn ƒë·∫∑t l·∫°i l·ªãch h·∫πn m·ªõi ƒë·ªÉ
                  ti·∫øp t·ª•c. Trang s·∫Ω t·ª± ƒë·ªông chuy·ªÉn v·ªÅ danh s√°ch l·ªãch h·∫πn sau 5
                  gi√¢y.
                </p>
              </div>
              <div className="flex gap-4 mt-8">
                <button
                  className="px-6 py-3 bg-[#39BDCC] text-white rounded-lg font-semibold hover:bg-[#2ca6b5] transition"
                  onClick={() =>
                    (window.location.href = "/patient/appointments")
                  }
                >
                  Xem l·ªãch h·∫πn c·ªßa t√¥i
                </button>
                <button
                  className="px-6 py-3 bg-gray-200 text-gray-800 rounded-lg font-semibold hover:bg-gray-300 transition"
                  onClick={onClose}
                >
                  ƒê√≥ng
                </button>
              </div>
            </div>
          )}

          {["pending", "checking"].includes(status) && (
            <>
              {/* C·ªôt tr√°i: QR v√† ƒê·∫øm ng∆∞·ª£c */}
              <div className="flex flex-col items-center p-6 bg-gray-50 rounded-lg">
                <h3 className="text-lg font-semibold text-gray-800">
                  Qu√©t m√£ QR ƒë·ªÉ thanh to√°n
                </h3>
                <p className="text-sm text-gray-500 mt-2">
                  Giao d·ªãch s·∫Ω h·∫øt h·∫°n sau:
                </p>

                {/* ƒê·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c */}
                <div className="flex items-center gap-3 my-4">
                  <div className="flex flex-col items-center justify-center bg-white border border-gray-200 rounded-lg w-20 h-20">
                    <span className="text-3xl font-bold text-[#39BDCC]">
                      {minutes}
                    </span>
                    <span className="text-xs text-gray-500">Ph√∫t</span>
                  </div>
                  <span className="text-3xl font-bold text-gray-400">:</span>
                  <div className="flex flex-col items-center justify-center bg-white border border-gray-200 rounded-lg w-20 h-20">
                    <span className="text-3xl font-bold text-[#39BDCC]">
                      {seconds}
                    </span>
                    <span className="text-xs text-gray-500">Gi√¢y</span>
                  </div>
                </div>

                {/* M√£ QR (S·ª≠ d·ª•ng placeholder) */}
                <div className="p-2 border bg-white rounded-lg shadow-md">
                  <img
                    // TODO: Thay b·∫±ng API t·∫°o QR ƒë·ªông v·ªõi n·ªôi dung thanh to√°n t·ª´ backend
                    alt="M√£ QR thanh to√°n"
                    className="w-48 h-48"
                    src={`https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=APPOINTMENT ${paymentId?.slice(-8).toUpperCase()}`}
                  />
                </div>

                <p className="text-xs text-gray-500 text-center mt-4">
                  Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin v√† x√°c nh·∫≠n thanh to√°n tr√™n
                  ·ª©ng d·ª•ng c·ªßa b·∫°n.
                </p>
                {/* Tr·∫°ng th√°i ƒëang ki·ªÉm tra */}
                {status === "checking" && (
                  <div className="flex items-center text-sm text-blue-600 mt-4">
                    <ArrowPathIcon className="w-4 h-4 mr-2 animate-spin" />
                    ƒêang ki·ªÉm tra giao d·ªãch...
                  </div>
                )}
                {/* N√∫t H·ªßy */}
                <button
                  className="w-full px-6 py-3 mt-6 bg-pink-50 text-pink-700 rounded-lg font-semibold hover:bg-pink-100 transition"
                  onClick={onClose}
                >
                  H·ªßy giao d·ªãch
                </button>
              </div>

              {/* C·ªôt ph·∫£i: H∆∞·ªõng d·∫´n */}
              <div className="pt-6">
                <h3 className="text-lg font-semibold text-gray-800 mb-6">
                  H∆∞·ªõng d·∫´n thanh to√°n
                </h3>

                <ul className="space-y-5">
                  {/* B∆∞·ªõc 1 */}
                  <li className="flex items-start gap-4">
                    <div className="flex-shrink-0 flex items-center justify-center w-12 h-12 bg-gray-100 rounded-lg">
                      <QrCodeIcon className="w-6 h-6 text-gray-600" />
                    </div>
                    <div>
                      <h4 className="font-semibold text-gray-700">B∆∞·ªõc 1</h4>
                      <p className="text-sm text-gray-500">
                        M·ªü ·ª©ng d·ª•ng Ng√¢n h√†ng/V√≠ ƒëi·ªán t·ª≠ tr√™n ƒëi·ªán tho·∫°i.
                      </p>
                    </div>
                  </li>

                  {/* B∆∞·ªõc 2 */}
                  <li className="flex items-start gap-4">
                    <div className="flex-shrink-0 flex items-center justify-center w-12 h-12 bg-gray-100 rounded-lg">
                      <ViewfinderCircleIcon className="w-6 h-6 text-gray-600" />
                    </div>
                    <div>
                      <h4 className="font-semibold text-gray-700">B∆∞·ªõc 2</h4>
                      <p className="text-sm text-gray-500">
                        Ch·ªçn t√≠nh nƒÉng qu√©t m√£ QR.
                      </p>
                    </div>
                  </li>

                  {/* B∆∞·ªõc 3 */}
                  <li className="flex items-start gap-4">
                    <div className="flex-shrink-0 flex items-center justify-center w-12 h-12 bg-gray-100 rounded-lg">
                      <CheckCircleIcon className="w-6 h-6 text-gray-600" />
                    </div>
                    <div>
                      <h4 className="font-semibold text-gray-700">B∆∞·ªõc 3</h4>
                      <p className="text-sm text-gray-500">
                        Ki·ªÉm tra l·∫°i th√¥ng tin v√† x√°c nh·∫≠n thanh to√°n tr√™n ·ª©ng
                        d·ª•ng c·ªßa b·∫°n.
                      </p>
                    </div>
                  </li>

                  {/* B∆∞·ªõc 4 */}
                  <li className="flex items-start gap-4">
                    <div className="flex-shrink-0 flex items-center justify-center w-12 h-12 bg-gray-100 rounded-lg">
                      <ArrowPathIcon className="w-6 h-6 text-gray-600" />
                    </div>
                    <div>
                      <h4 className="font-semibold text-gray-700">B∆∞·ªõc 4</h4>
                      <p className="text-sm text-gray-500">
                        H·ªá th·ªëng ƒëang ki·ªÉm tra giao d·ªãch, vui l√≤ng ch·ªù trong
                        gi√¢y l√°t.
                      </p>
                    </div>
                  </li>
                </ul>

                {/* H·ªó tr·ª£ */}
                <div className="mt-8 pt-6 border-t border-gray-200">
                  <p className="text-sm text-gray-600">
                    G·∫∑p s·ª± c·ªë khi thanh to√°n?{" "}
                    <button
                      className="font-semibold text-[#39BDCC] hover:underline"
                      onClick={() => (window.location.href = "tel:0123456789")}
                    >
                      Li√™n h·ªá h·ªó tr·ª£
                    </button>
                  </p>
                </div>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default PaymentModal;
